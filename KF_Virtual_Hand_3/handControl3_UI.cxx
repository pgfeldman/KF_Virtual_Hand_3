#include "stdafx.h"
// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "handControl3_UI.h"

void HandControlUI::cb_greenSensitivity_i(Fl_Value_Slider* o, void*) {
  handView->getGripper()->setEffectorScalar(Gripper::GREEN, o->value());
}
void HandControlUI::cb_greenSensitivity(Fl_Value_Slider* o, void* v) {
  ((HandControlUI*)(o->parent()->parent()->user_data()))->cb_greenSensitivity_i(o,v);
}

void HandControlUI::cb_redSensitivity_i(Fl_Value_Slider* o, void*) {
  handView->getGripper()->setEffectorScalar(Gripper::RED, o->value());
}
void HandControlUI::cb_redSensitivity(Fl_Value_Slider* o, void* v) {
  ((HandControlUI*)(o->parent()->parent()->user_data()))->cb_redSensitivity_i(o,v);
}

Fl_Menu_Item HandControlUI::menu_subjectGender[] = {
 {"Male", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Female", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* HandControlUI::male = HandControlUI::menu_subjectGender + 0;
Fl_Menu_Item* HandControlUI::female = HandControlUI::menu_subjectGender + 1;

void HandControlUI::cb_testTypeCombo_i(Fl_Choice*, void*) {
  cmd->set("testType", NULL);
}
void HandControlUI::cb_testTypeCombo(Fl_Choice* o, void* v) {
  ((HandControlUI*)(o->parent()->parent()->user_data()))->cb_testTypeCombo_i(o,v);
}

Fl_Menu_Item HandControlUI::menu_testTypeCombo[] = {
 {"No Feedback", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Haptic", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Tactor", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Haptic and Tactor", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"All", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* HandControlUI::noFeedback = HandControlUI::menu_testTypeCombo + 0;
Fl_Menu_Item* HandControlUI::hapticOnly = HandControlUI::menu_testTypeCombo + 1;
Fl_Menu_Item* HandControlUI::tactorOnly = HandControlUI::menu_testTypeCombo + 2;
Fl_Menu_Item* HandControlUI::hapticAndTactor = HandControlUI::menu_testTypeCombo + 3;
Fl_Menu_Item* HandControlUI::hapticAndTactorAndNone = HandControlUI::menu_testTypeCombo + 4;

void HandControlUI::cb_saveSetupFile_i(Fl_Menu_*, void*) {
  cmd->set("saveSetup", NULL);
}
void HandControlUI::cb_saveSetupFile(Fl_Menu_* o, void* v) {
  ((HandControlUI*)(o->parent()->user_data()))->cb_saveSetupFile_i(o,v);
}

void HandControlUI::cb_openFile_i(Fl_Menu_*, void*) {
  cmd->set("openFile", NULL);
}
void HandControlUI::cb_openFile(Fl_Menu_* o, void* v) {
  ((HandControlUI*)(o->parent()->user_data()))->cb_openFile_i(o,v);
}

void HandControlUI::cb_singleSoundChoice_i(Fl_Menu_*, void*) {
  cmd->set("singleSoundChoice", NULL);
}
void HandControlUI::cb_singleSoundChoice(Fl_Menu_* o, void* v) {
  ((HandControlUI*)(o->parent()->user_data()))->cb_singleSoundChoice_i(o,v);
}

void HandControlUI::cb_closeAll_i(Fl_Menu_*, void*) {
  cmd->set("close", NULL);
}
void HandControlUI::cb_closeAll(Fl_Menu_* o, void* v) {
  ((HandControlUI*)(o->parent()->user_data()))->cb_closeAll_i(o,v);
}

Fl_Menu_Item HandControlUI::menu_[] = {
 {"File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save Setup File", 0,  (Fl_Callback*)HandControlUI::cb_saveSetupFile, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Open Setup File", 0,  (Fl_Callback*)HandControlUI::cb_openFile, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Add Single Sound", 0,  (Fl_Callback*)HandControlUI::cb_singleSoundChoice, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Exit", 0,  (Fl_Callback*)HandControlUI::cb_closeAll, (void*)("Close Info"), 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* HandControlUI::saveSetupFile = HandControlUI::menu_ + 1;
Fl_Menu_Item* HandControlUI::openFile = HandControlUI::menu_ + 2;
Fl_Menu_Item* HandControlUI::singleSoundChoice = HandControlUI::menu_ + 3;
Fl_Menu_Item* HandControlUI::closeAll = HandControlUI::menu_ + 4;

void HandControlUI::cb_startButton_i(Fl_Button*, void*) {
  cmd->set("start", NULL);
}
void HandControlUI::cb_startButton(Fl_Button* o, void* v) {
  ((HandControlUI*)(o->parent()->user_data()))->cb_startButton_i(o,v);
}

void HandControlUI::cb_nextButton_i(Fl_Button*, void*) {
  cmd->set("next", NULL);
}
void HandControlUI::cb_nextButton(Fl_Button* o, void* v) {
  ((HandControlUI*)(o->parent()->user_data()))->cb_nextButton_i(o,v);
}

void HandControlUI::cb_setEnvButton_i(Fl_Button*, void*) {
  cmd->set("env", NULL);
}
void HandControlUI::cb_setEnvButton(Fl_Button* o, void* v) {
  ((HandControlUI*)(o->parent()->parent()->user_data()))->cb_setEnvButton_i(o,v);
}

void HandControlUI::cb_constrainTargetsCheck_i(Fl_Check_Button*, void*) {
  cmd->set("env", NULL);
}
void HandControlUI::cb_constrainTargetsCheck(Fl_Check_Button* o, void* v) {
  ((HandControlUI*)(o->parent()->parent()->user_data()))->cb_constrainTargetsCheck_i(o,v);
}

HandControlUI::HandControlUI() {
  { mainWindow = new Fl_Double_Window(919, 662, "Hand Control UI (Version 8.26.13)");
    mainWindow->box(FL_THIN_UP_BOX);
    mainWindow->user_data((void*)(this));
    { handView = new KF_Hand_Window(10, 60, 580, 500, "3D View");
      handView->box(FL_ENGRAVED_FRAME);
      handView->color(FL_BACKGROUND_COLOR);
      handView->selection_color(FL_BACKGROUND_COLOR);
      handView->labeltype(FL_NORMAL_LABEL);
      handView->labelfont(0);
      handView->labelsize(14);
      handView->labelcolor(FL_FOREGROUND_COLOR);
      handView->align(Fl_Align(FL_ALIGN_CENTER));
      handView->when(FL_WHEN_RELEASE);
      Fl_Group::current()->resizable(handView);
    } // KF_Hand_Window* handView
    { Fl_Group* o = new Fl_Group(12, 578, 323, 76, "Sensitivity");
      o->box(FL_ENGRAVED_FRAME);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { greenSensitivity = new Fl_Value_Slider(70, 588, 250, 23, "Green");
        greenSensitivity->type(5);
        greenSensitivity->value(0.4);
        greenSensitivity->textsize(14);
        greenSensitivity->callback((Fl_Callback*)cb_greenSensitivity, (void*)(handView));
        greenSensitivity->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* greenSensitivity
      { redSensitivity = new Fl_Value_Slider(70, 622, 250, 23, "Red");
        redSensitivity->type(5);
        redSensitivity->value(0.4);
        redSensitivity->textsize(14);
        redSensitivity->callback((Fl_Callback*)cb_redSensitivity, (void*)(handView));
        redSensitivity->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* redSensitivity
      o->end();
    } // Fl_Group* o
    { setup = new Fl_Group(600, 75, 305, 230, "Setup");
      setup->box(FL_UP_BOX);
      setup->labelsize(12);
      setup->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { researcherNameInput = new Fl_Input(745, 82, 150, 24, "Reseacher :");
      } // Fl_Input* researcherNameInput
      { subjectNameInput = new Fl_Input(745, 111, 150, 24, "Subject :");
      } // Fl_Input* subjectNameInput
      { subjectAgeInput = new Fl_Input(745, 141, 150, 24, "Subject Age :");
      } // Fl_Input* subjectAgeInput
      { subjectGender = new Fl_Choice(745, 170, 150, 25, "Gender :");
        subjectGender->down_box(FL_BORDER_BOX);
        subjectGender->menu(menu_subjectGender);
      } // Fl_Choice* subjectGender
      { seedInput = new Fl_Value_Input(745, 202, 150, 24, "Seed:");
      } // Fl_Value_Input* seedInput
      { sessionInput = new Fl_Value_Input(745, 232, 150, 24, "Sessions:");
        sessionInput->value(1);
      } // Fl_Value_Input* sessionInput
      { testTypeCombo = new Fl_Choice(745, 265, 150, 24, "Test Type :");
        testTypeCombo->down_box(FL_BORDER_BOX);
        testTypeCombo->callback((Fl_Callback*)cb_testTypeCombo);
        testTypeCombo->menu(menu_testTypeCombo);
      } // Fl_Choice* testTypeCombo
      setup->end();
    } // Fl_Group* setup
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 920, 25);
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { Fl_Group* o = new Fl_Group(600, 358, 310, 202, "Current");
      o->box(FL_THIN_UP_BOX);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { curOpenLoopOutput = new Fl_Output(750, 365, 150, 25, "Open Loop Test :");
        curOpenLoopOutput->color((Fl_Color)29);
      } // Fl_Output* curOpenLoopOutput
      { curHapticOutput = new Fl_Output(750, 395, 150, 25, "Haptic Test :");
        curHapticOutput->color((Fl_Color)29);
      } // Fl_Output* curHapticOutput
      { curTactorOutput = new Fl_Output(750, 425, 150, 25, "Tactor Test :");
        curTactorOutput->color((Fl_Color)29);
      } // Fl_Output* curTactorOutput
      { curHapticTactorOutput = new Fl_Output(750, 455, 150, 25, "Haptic Tactor Test :");
        curHapticTactorOutput->color((Fl_Color)29);
      } // Fl_Output* curHapticTactorOutput
      { soundChoice = new Fl_Choice(745, 513, 150, 25, "Sounds :");
        soundChoice->down_box(FL_BORDER_BOX);
      } // Fl_Choice* soundChoice
      o->end();
    } // Fl_Group* o
    { startButton = new Fl_Button(825, 630, 85, 25, "Start");
      startButton->callback((Fl_Callback*)cb_startButton);
    } // Fl_Button* startButton
    { nextButton = new Fl_Button(825, 565, 85, 60, "Next");
      nextButton->shortcut(0x20);
      nextButton->callback((Fl_Callback*)cb_nextButton);
    } // Fl_Button* nextButton
    { testDirections = new Fl_Output(80, 30, 825, 25, "Directions:");
      testDirections->color((Fl_Color)29);
    } // Fl_Output* testDirections
    { constrainTargetCheck = new Fl_Group(345, 580, 470, 75, "Environment");
      constrainTargetCheck->box(FL_THIN_UP_BOX);
      constrainTargetCheck->labelsize(12);
      constrainTargetCheck->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { xmin = new Fl_Value_Input(390, 586, 50, 18, "x min:");
        xmin->labelsize(12);
        xmin->minimum(-500);
        xmin->maximum(500);
        xmin->value(-200);
      } // Fl_Value_Input* xmin
      { ymin = new Fl_Value_Input(390, 607, 50, 18, "y min:");
        ymin->labelsize(12);
        ymin->minimum(-500);
        ymin->maximum(500);
        ymin->value(-100);
      } // Fl_Value_Input* ymin
      { zmin = new Fl_Value_Input(390, 627, 50, 18, "z min:");
        zmin->labelsize(12);
        zmin->minimum(-500);
        zmin->maximum(500);
        zmin->value(-100);
      } // Fl_Value_Input* zmin
      { xmax = new Fl_Value_Input(485, 587, 50, 18, "x max:");
        xmax->labelsize(12);
        xmax->minimum(-500);
        xmax->maximum(500);
        xmax->value(200);
      } // Fl_Value_Input* xmax
      { ymax = new Fl_Value_Input(485, 607, 50, 18, "y max:");
        ymax->labelsize(12);
        ymax->minimum(-500);
        ymax->maximum(500);
        ymax->value(150);
      } // Fl_Value_Input* ymax
      { zmax = new Fl_Value_Input(485, 627, 50, 18, "z max:");
        zmax->labelsize(12);
        zmax->minimum(-500);
        zmax->maximum(500);
        zmax->value(10);
      } // Fl_Value_Input* zmax
      { targetSphereMin = new Fl_Value_Input(615, 587, 50, 18, "sphere min:");
        targetSphereMin->labelsize(12);
        targetSphereMin->maximum(100);
        targetSphereMin->value(20);
      } // Fl_Value_Input* targetSphereMin
      { targetSphereMax = new Fl_Value_Input(615, 607, 50, 18, "sphere max:");
        targetSphereMax->labelsize(12);
        targetSphereMax->maximum(100);
        targetSphereMax->value(25);
      } // Fl_Value_Input* targetSphereMax
      { goalBoxSize = new Fl_Value_Input(755, 587, 50, 18, "goal box size");
        goalBoxSize->labelsize(12);
        goalBoxSize->maximum(100);
        goalBoxSize->value(30);
      } // Fl_Value_Input* goalBoxSize
      { setEnvButton = new Fl_Button(740, 630, 64, 20, "Set");
        setEnvButton->callback((Fl_Callback*)cb_setEnvButton);
      } // Fl_Button* setEnvButton
      { constrainTargetsCheck = new Fl_Check_Button(613, 633, 64, 15, "constrainTargets");
        constrainTargetsCheck->down_box(FL_DOWN_BOX);
        constrainTargetsCheck->labelsize(12);
        constrainTargetsCheck->callback((Fl_Callback*)cb_constrainTargetsCheck);
      } // Fl_Check_Button* constrainTargetsCheck
      constrainTargetCheck->end();
    } // Fl_Group* constrainTargetCheck
    mainWindow->end();
  } // Fl_Double_Window* mainWindow
}

void HandControlUI::show(int argc, char **argv) {
  mainWindow->show(argc, argv);
  greenSensitivity->value(0.23);
  redSensitivity->value(0.23);
}

void HandControlUI::setCmdPtr(UI_cmd *pCmd) {
  cmd = pCmd;
  printf("cmd pointers set\n");
}
